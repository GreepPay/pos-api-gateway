input FinancialSummaryInput {
    type: String!
    from: String
    to: String
}

extend type Query @guard {
    "Get many transactions - paginated list of transactions for the authenticated user"
    GetTransactions(
        orderBy: _ @orderBy(columns: ["created_at"])
        where: _
            @whereConditions(
                columns: [
                    "dr_or_cr"
                    "status"
                    "currency"
                    "amount"
                    "chargeable_type"
                    "reference"
                    "created_at"
                    "updated_at"
                ]
            )
    ): [Transaction!]! @paginate @whereAuth(relation: "user")

    "Get many point transactions"
    GetPointTransactions(
        orderBy: _ @orderBy(columns: ["created_at"])
        where: _
            @whereConditions(
                columns: [
                    "dr_or_cr"
                    "status"
                    "currency"
                    "amount"
                    "chargeable_type"
                    "reference"
                    "created_at"
                    "updated_at"
                ]
            )
    ): [PointTransaction!]! @paginate @whereAuth(relation: "user")

    "Get a single transaction by UUID"
    GetSingleTransaction(uuid: String! @eq): Transaction @first

    "Get a single point transaction by UUID"
    GetSinglePointTransaction(uuid: String! @eq): PointTransaction @first

    "Get a paginated list of saved accounts for the authenticated user"
    GetSavedAccounts: [UserBank]! @paginate @whereAuth(relation: "user")

    "Get the currently supported off-ramp currencies"
    GetOffRampCurrencies: [SupportedCurrency!]!
        @field(resolver: "WalletQuery@getOffRampCurrencies")

    "Get the current exchange rate between two currencies"
    GetExchangeRate(
        from_currency: String!
        to_currency: String!
    ): ExchangeRate! @field(resolver: "WalletQuery@getExchangeRate")

    "Get the global exchange rate between two currencies"
    GetGlobalExchangeRate(base: String!, target: String!): GlobalExchangeRate!
        @field(resolver: "WalletQuery@getGlobalExchangeRate")

    "Get financial summary"
    GetFinancialSummary(
        input: FinancialSummaryInput! @spread
    ): FinancialSummaryResponse!
        @field(resolver: "WalletQuery@getFinancialSummary")

    "Get withdrawal info"
    GetWithdrawInfo(amount: Float!, currency: String): WithdrawInfo!
        @field(resolver: "WalletQuery@getWithdrawInfo")

    "Get yellow card networks"
    GetYellowCardNetwork(country_code: String!): [YellowcardNetwork!]!
        @field(resolver: "WalletQuery@getYellowCardNetwork")

    "Get bank account details"
    GetBankAccountDetails(accountNumber: String!, networkId: String!): String!
        @field(resolver: "WalletQuery@getBankAccountDetails")

    "Get single offramp"
    GetOfframp(uuid: String! @eq): OffRamp @first
    "Get all ads - paginated list of ads"
    GetAllAds(
        orderBy: _ @orderBy(columns: ["created_at"])
        where: _
            @whereConditions(
                columns: [
                    "from_currency"
                    "to_currency"
                    "rate"
                    "min_amount"
                    "max_amount"
                    "payout_address"
                    "address_details"
                    "business_id"
                    "status"
                    "created_at"
                    "updated_at"
                ]
            )
    ): [Ad!]! @paginate

    "Get a single ad by UUID"
    GetSingleAd(uuid: String! @eq): Ad @first

    "Get all orders - paginated list of orders"
    GetAllOrders(
        orderBy: _ @orderBy(columns: ["created_at"])
        where: _
            @whereConditions(
                columns: [
                    "amount"
                    "status"
                    "expired_at" 
                    "expected_amount"               
                    "payment_amount"
                    "payment_type"
                    "payout_option"
                    "pickup_location_address_line"
                    "pickup_location_city"
                    "pickup_location_country"
                    "created_at"
                    "updated_at"
                ]
            )
    ): [Order!]! @paginate @whereAuth(relation: "user")

    "Get a single order by UUID"
    GetSingleOrder(uuid: String! @eq): Order @first
    
    
    "Get trade exchange rate information"
        GetTradeExchangeRate(
            from_currency: String!
            to_currency: String!
        ): TradeExchangeRate! @field(resolver: "TradeQuery@getTradeExchangeRate")
    
        "Get trade cash limits for a currency pair"
        GetTradeCashLimits(
            from_currency: String!
            to_currency: String!
        ): CashLimit! @field(resolver: "TradeQuery@getTradeCashLimits")
    
        "Get available payout options for a trade"
        GetTradePayoutOptions(
            from_currency: String!
            to_currency: String!
        ): [String!]! @field(resolver: "TradeQuery@getTradePayoutOptions")
    
        "Get trader profile information including trade stats"
        GetTraderProfile(
            user_id: String! @eq
        ): TraderProfile! @field(resolver: "TradeQuery@getTraderProfile")

}

extend type Mutation @guard {
    "Initiate withdrawal"
    InitiateWithdrawal(
        saved_account_uuid: String!
        amount: Float!
        withdrawal_currency: String!
    ): OffRamp @field(resolver: "WalletMutator@initiateWithdrawal")

    "Initiate wallet KYC"
    InitiateWalletKYC(currency: String!): String
        @field(resolver: "WalletMutator@initiateWalletKYC")

    "Confirm withdrawal"
    ConfirmWithdrawal(
        uuid: String!
        currency: String!
        amount: Float!
        metadata: String
    ): OffRamp @field(resolver: "WalletMutator@confirmWithdrawal")

    "Redeem GRP tokens"
    RedeemGRPToken(grp_amount: Float!): Boolean!
        @field(resolver: "WalletMutator@redeemGRPToken")

    "Create a saved account"
    CreateSavedAccount(
        "can be  ‘crypto’, ‘bank_account’, ‘mobile_money’"
        type: String!
        "unique id from the account e.g account number , phone number, wallet address e.t.c"
        unique_id: String!
        "Stringified JSON object containing additional account details"
        metadata: String!
        "uploads"
        uploads: [Upload!]
    ): UserBank! @field(resolver: "WalletMutator@createSavedAccount")

    "Remove a saved account"
    RemoveSavedAccount(saved_account_uuid: String!): Boolean!
        @field(resolver: "WalletMutator@removeSavedAccount")
        
    "Create Ad"
    CreateAd(
        uuid: String!
        from_currency: String!
        to_currency: String!
        rate: Float!
        min_amount: Float!
        max_amount: Float!
        payout_address: String!
        address_details:String!
        payout_banks:[String!]!
        business_id:String!
      
        ): Ad! @field(resolver: "WalletMutator@CreateAd")
        
    
        "Create Order"
        CreateOrder(
            uuid: String!
            amount: number!
            amount: Float!
            payment_amount: String!
            payment_type: string!
            payout_option: string!
            pickup_location_address_line: string!
            pickup_location_city: string!
            pickup_location_country!: string
            ): Order! @field(resolver: "WalletMutator@CreateOrder")
}



