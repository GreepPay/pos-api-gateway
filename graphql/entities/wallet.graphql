extend type Query @guard {
    "Get many transactions - paginated list of transactions for the authenticated user"
    GetTransactions(
        orderBy: _ @orderBy(columns: ["created_at"])
        where: _
            @whereConditions(
                columns: [
                    "dr_or_cr"
                    "status"
                    "currency"
                    "amount"
                    "chargeable_type"
                    "reference"
                ]
            )
    ): [Transaction!]! @paginate @whereAuth(relation: "user")

    "Get many point transactions"
    GetPointTransactions(
        orderBy: _ @orderBy(columns: ["created_at"])
        where: _
            @whereConditions(
                columns: [
                    "dr_or_cr"
                    "status"
                    "currency"
                    "amount"
                    "chargeable_type"
                    "reference"
                ]
            )
    ): [PointTransaction!]! @paginate @whereAuth(relation: "user")

    "Get a single transaction by UUID"
    GetSingleTransaction(uuid: String! @eq): Transaction @first

    "Get a single point transaction by UUID"
    GetSinglePointTransaction(uuid: String! @eq): PointTransaction @first

    "Get a paginated list of saved accounts for the authenticated user"
    GetSavedAccounts: [UserBank]! @paginate @whereAuth(relation: "user")

    "Get the currently supported off-ramp currencies"
    GetOffRampCurrencies: [SupportedCurrency!]!
        @field(resolver: "WalletQuery@getOffRampCurrencies")

    "Get the current exchange rate between two currencies"
    GetExchangeRate(
        from_currency: String!
        to_currency: String!
    ): ExchangeRate! @field(resolver: "WalletQuery@getExchangeRate")

    "Get the global exchange rate between two currencies"
    GetGlobalExchangeRate(base: String!, target: String!): GlobalExchangeRate!
        @field(resolver: "WalletQuery@getGlobalExchangeRate")
}

extend type Mutation @guard {
    "Initiate withdrawal"
    InitiateWithdrawal(
        saved_account_uuid: String!
        amount: Float!
        withdrawal_currency: String!
    ): Boolean! @field(resolver: "WalletMutator@initiateWithdrawal")

    "Redeem GRP tokens"
    RedeemGRPToken(grp_amount: Float!): Boolean!
        @field(resolver: "WalletMutator@redeemGRPToken")

    "Create a saved account"
    CreateSavedAccount(
        "can be  ‘crypto’, ‘bank_account’, ‘mobile_money’"
        type: String!
        "unique id from the account e.g account number , phone number, wallet address e.t.c"
        unique_id: String!
        "Stringified JSON object containing additional account details"
        metadata: String!
    ): UserBank! @field(resolver: "WalletMutator@createSavedAccount")

    "Remove a saved account"
    RemoveSavedAccount(saved_account_uuid: String!): Boolean!
        @field(resolver: "WalletMutator@removeSavedAccount")
}
