9"A single beneficiary"
type UserBank {
    "Unique UUID"
    uuid: String!

    "Wallet ID"
    wallet_id: Int!

    "Bank Code"
    bank_code: String!

    "Bank Name"
    bank_name: String!

    "Account Number"
    account_no: String!

    "Currency (default: 'USDC')"
    currency: String!

    "Is Verified"
    is_verified: Boolean!

    "State of the beneficiary (active or archived)"
    state: String!

    "Metadata associated with the beneficiary"
    meta_data: String
}

"A single point transaction"
type PointTransaction {
    "Unique UUID"
    uuid: String!

    "Credit or Debit: 'credit' or 'debit'"
    dr_or_cr: String!

    "Wallet ID"
    wallet_id: Int!

    "User ID"
    user_id: Int!

    "Transaction Amount"
    amount: Float!

    "Point Balance"
    point_balance: Float!

    "Charge ID"
    charge_id: String!

    "State of the point transaction ('active' or 'archived')"
    state: String!

    "Chargeable Type"
    chargeable_type: String!

    "Point Transaction Description"
    description: String!

    "Point Transaction Status ('default', 'pending', 'successful')"
    status: String!

    "Point Transaction Reference"
    reference: String!

    "Extra Data (JSON string)"
    extra_data: String

    "Currency (default: 'USDC')"
    currency: String!

    "PointTransaction Created At"
    created_at: DateTime!

    "Point Transaction Updated At"
    updated_at: DateTime!
}

"A single transaction"
type Transaction {
    "Unique UUID"
    uuid: String!

    "Credit or Debit: 'credit' or 'debit'"
    dr_or_cr: String!

    "Currency (default: 'USDC')"
    currency: String!

    "Wallet ID"
    wallet_id: Int!

    "User ID"
    user_id: Int!

    "Transaction Amount"
    amount: Float!

    "Wallet Balance"
    wallet_balance: Float!

    "Charge ID"
    charge_id: String!

    "The associated point transaction"
    point_transaction: PointTransaction @method(name: "pointTransaction")

    "Chargeable Type"
    chargeable_type: String!

    "Transaction Description"
    description: String!

    "Transaction Status ('default', 'pending', 'successful')"
    status: String!

    "Charges"
    charges: Float!

    "Transaction Reference"
    reference: String!

    "State of the transaction ('active' or 'archived')"
    state: String!

    "Gateway (default: 'Greep-wallet')"
    gateway: String!

    "Transaction Created At"
    created_at: DateTime!

    "Transaction Updated At"
    updated_at: DateTime!
}

"A single wallet"
type Wallet {
    "Unique UUID"
    uuid: String!

    "Total Balance"
    total_balance: Float!

    "Point Balance"
    point_balance: Float!

    "Credited Amount"
    credited_amount: Float!

    "Debited Amount"
    debited_amount: Float!

    "Locked Balance"
    locked_balance: Float!

    "Credited Point Amount"
    credited_point_amount: Float!

    "Wallet State ('active' or 'archived')"
    state: String!

    "Debited Point Amount"
    debited_point_amount: Float!

    "Cash Point Balance"
    cash_point_balance: Float!

    "Cash Per Point"
    cash_per_point: Float!

    "Currency (default: 'USDC')"
    currency: String!

    "Wallet Created At"
    created_at: DateTime!

    "Wallet Updated At"
    updated_at: DateTime!
}

type GlobalExchangeRate {
    "Base Currency"
    base: String!

    "Target Currency"
    target: String!

    "Mid Rate"
    mid: Float!

    "Unit"
    unit: Int!

    "Timestamp"
    timestamp: DateTime!
}

"Yellowcard Network"
type YellowcardNetwork {
    "Unique ID"
    id: String!

    "Network Code"
    code: String

    "Has branch"
    hasBranch: Boolean

    "Network Name"
    name: String

    "Country Code"
    country: String

    "Account Number Type"
    accountNumberType: String

    "Country Account Number Type"
    countryAccountNumberType: String

    "Status"
    status: String

    "Channel IDs"
    channelIds: [String]
}

"Payment Request Response"
type PaymentRequestResponse {
    "Unique ID"
    id: String!

    "Channel ID"
    channelId: String!

    "Sequence ID"
    sequenceId: String!

    "Currency"
    currency: String!

    "Country"
    country: String!

    "Amount"
    amount: Float!

    "Reason"
    reason: String!

    "Converted Amount"
    convertedAmount: Float!

    "Status"
    status: String!

    "Rate"
    rate: Float!

    "Sender Information"
    sender: Sender!

    "Destination Information"
    destination: Destination!

    "Created At"
    createdAt: String!

    "Updated At"
    updatedAt: String!

    "Expiration Time"
    expiresAt: String!
}

"Sender Details"
type Sender {
    "Sender's Name"
    name: String!

    "Sender's Country"
    country: String!

    "Sender's Phone Number"
    phone: String!

    "Sender's Address"
    address: String!

    "Sender's Date of Birth"
    dob: String!

    "Sender's Email"
    email: String!

    "Sender's ID Number"
    idNumber: String!

    "Sender's ID Type"
    idType: String!
}

"Destination Details"
type Destination {
    "Account Name"
    accountName: String!

    "Account Number"
    accountNumber: String!

    "Account Type"
    accountType: String!

    "Network ID"
    networkId: String!
}

"Offramp Transaction"
type OffRamp {
    "Unique ID"
    id: Int!

    "Unique UUID"
    uuid: String!

    "Withdrawal Amount"
    amount: String!

    "Yellow card payment"
    yellow_card_payment: PaymentRequestResponse
        @method(name: "yellowCardPayment")

    "Payment Reference"
    payment_reference: String!

    "Transaction State ('active' or 'archived')"
    state: String!

    "Payment Channel"
    payment_channel: String!

    "Withdrawal Description"
    description: String!

    "Transaction Status"
    status: String!

    "Currency of Withdrawal"
    currency: String!

    "Additional Data"
    extra_data: String

    "Sender's Full Name"
    senderName: String

    "Sender's Country"
    senderCountry: String

    "Sender's Phone Number"
    senderPhone: String

    "Sender's Address"
    senderAddress: String

    "Sender's Date of Birth"
    senderDob: String

    "Sender's Email Address"
    senderEmail: String

    "Type of Sender's ID"
    senderIdType: String

    "Sender's Business ID (if institution)"
    senderBusinessId: String

    "Sender's Business Name (if institution)"
    senderBusinessName: String

    "Additional ID Type (if applicable)"
    senderAdditionalIdType: String

    "Additional ID Number (if applicable)"
    senderAdditionalIdNumber: String

    "Offramp Created At"
    created_at: String!

    "Offramp Updated At"
    updated_at: String!
}



"""
A single order placed for an Ad
"""
type Order {
  "Unique UUID for the order"
  uuid: String!

  "ID of the Ad this order is for"
  ad_id: Int!

  "ID of the User who placed the order"
  user_id: Int!

  "Amount in from_currency"
  amount: Float!

  "Amount expected in to_currency"
  expected_amount: Float!

  "Expiration date and time of the order"
  expired_at: DateTime!

  "Order status (pending, completed, cancelled, failed)"
  status: String!

  "Payment Amount"
  payment_amount: String

  "Payment Type"
  payment_type: String

  "Payout Option"
  payout_option: String

  "Pickup Location Address Line"
  pickup_location_address_line: String

  "Pickup Location City"
  pickup_location_city: String

  "Pickup Location Country"
  pickup_location_country: String

  "Customer Name"
  customer_name: String

  "Associated Ad"
  ad: Ad!

  "Date order was created"
  created_at: DateTime!

  "Date order was last updated"
  updated_at: DateTime!
}



"""
An Ad listing created by a user to exchange currency
"""
type Ad {
  "Unique UUID for the ad"
  uuid: String!

  "ID of the user who created the ad"
  user_id: Int!

  "Currency offered by user (e.g., USDC)"
  from_currency: String!

  "Currency user wants in return (e.g., Lira)"
  to_currency: String!

  "Conversion rate (e.g., 1 USDC = 40 Lira)"
  rate: Float!

  "Minimum exchange amount"
  min_amount: Float!

  "Maximum exchange amount"
  max_amount: Float!

  "Optional payout address (e.g., bank account)"
  payout_address: String

  "Additional address details (e.g., account number)"
  address_details: String

  "List of acceptable banks for payout"
  payout_banks: [String!]

  "Business UUID if posted as a business ad"
  business_id: String

  "Status of the ad (active, completed, cancelled)"
  status: String!

  "Orders placed for this ad"
  orders: [Order!]!

  "Date ad was created"
  created_at: DateTime!

  "Date ad was last updated"
  updated_at: DateTime!
}



type PayoutOption {
  type: String!
  details: String
}

type CashLimit {
  min: Float!
  max: Float!
}

type TradeExchange {
  rate: Float!
  fromCurrency: String!
  toCurrency: String!
}

type UserStats {
  totalTrades: Int!
  successRate: Float!
  profilePicture: String
  name: String!
}

type AdDetails {
  id: ID!
  exchange: TradeExchange!
  cashLimit: CashLimit!
  payoutOptions: [PayoutOption!]!
  userStats: UserStats!
}

type Query {
  getAdDetails(id: ID!): AdDetails
}



